<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Comic/src/main/java/reader/site/Comic/servlet/ReadingHistoryServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Comic/src/main/java/reader/site/Comic/servlet/ReadingHistoryServlet.java" />
              <option name="originalContent" value="package reader.site.Comic.servlet;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import reader.site.Comic.dao.ReadingHistoryDAO;&#10;import reader.site.Comic.model.ReadingHistory;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@WebServlet(&quot;/api/reading/*&quot;)&#10;public class ReadingHistoryServlet extends HttpServlet {&#10;    private ReadingHistoryDAO readingHistoryDAO;&#10;    private Gson gson;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        readingHistoryDAO = new ReadingHistoryDAO();&#10;        gson = new Gson();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        response.setContentType(&quot;application/json&quot;);&#10;        response.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = response.getWriter();&#10;&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        try {&#10;            switch (pathInfo) {&#10;                case &quot;/history&quot;:&#10;                    handleGetHistory(userId, request, response, out);&#10;                    break;&#10;                case &quot;/recent&quot;:&#10;                    handleGetRecent(userId, request, response, out);&#10;                    break;&#10;                case &quot;/completed&quot;:&#10;                    handleGetCompleted(userId, response, out);&#10;                    break;&#10;                case &quot;/reading&quot;:&#10;                    handleGetCurrentlyReading(userId, response, out);&#10;                    break;&#10;                case &quot;/stats&quot;:&#10;                    handleGetStats(userId, response, out);&#10;                    break;&#10;                case &quot;/progress&quot;:&#10;                    handleGetProgress(userId, request, response, out);&#10;                    break;&#10;                default:&#10;                    sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;                    break;&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            sendErrorResponse(response, &quot;Internal server error&quot;, 500);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        response.setContentType(&quot;application/json&quot;);&#10;        response.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        try {&#10;            switch (pathInfo) {&#10;                case &quot;/update&quot;:&#10;                    handleUpdateProgress(userId, request, response);&#10;                    break;&#10;                case &quot;/status&quot;:&#10;                    handleUpdateStatus(userId, request, response);&#10;                    break;&#10;                case &quot;/add-to-list&quot;:&#10;                    handleAddToList(userId, request, response);&#10;                    break;&#10;                default:&#10;                    sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;                    break;&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            sendErrorResponse(response, &quot;Internal server error&quot;, 500);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doDelete(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        if (&quot;/remove&quot;.equals(pathInfo)) {&#10;            handleRemoveFromHistory(userId, request, response);&#10;        } else {&#10;            sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;        }&#10;    }&#10;&#10;    private void handleGetHistory(String userId, HttpServletRequest request,&#10;                                 HttpServletResponse response, PrintWriter out) {&#10;        String status = request.getParameter(&quot;status&quot;);&#10;        List&lt;ReadingHistory&gt; history;&#10;&#10;        if (status != null &amp;&amp; !status.isEmpty()) {&#10;            history = readingHistoryDAO.getReadingHistoryByUserAndStatus(userId, status);&#10;        } else {&#10;            history = readingHistoryDAO.getReadingHistoryByUser(userId);&#10;        }&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(history));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetRecent(String userId, HttpServletRequest request,&#10;                                HttpServletResponse response, PrintWriter out) {&#10;        int limit = 10;&#10;        String limitParam = request.getParameter(&quot;limit&quot;);&#10;        if (limitParam != null) {&#10;            try {&#10;                limit = Integer.parseInt(limitParam);&#10;            } catch (NumberFormatException e) {&#10;                limit = 10;&#10;            }&#10;        }&#10;&#10;        List&lt;ReadingHistory&gt; recent = readingHistoryDAO.getRecentlyRead(userId, limit);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(recent));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetCompleted(String userId, HttpServletResponse response, PrintWriter out) {&#10;        List&lt;ReadingHistory&gt; completed = readingHistoryDAO.getCompletedComics(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(completed));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetCurrentlyReading(String userId, HttpServletResponse response, PrintWriter out) {&#10;        List&lt;ReadingHistory&gt; reading = readingHistoryDAO.getCurrentlyReading(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(reading));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetStats(String userId, HttpServletResponse response, PrintWriter out) {&#10;        Map&lt;String, Integer&gt; stats = readingHistoryDAO.getReadingStats(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(stats));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetProgress(String userId, HttpServletRequest request,&#10;                                  HttpServletResponse response, PrintWriter out) {&#10;        String comicId = request.getParameter(&quot;comicId&quot;);&#10;        if (comicId == null || comicId.isEmpty()) {&#10;            response.setStatus(400);&#10;            JsonObject errorResponse = new JsonObject();&#10;            errorResponse.addProperty(&quot;success&quot;, false);&#10;            errorResponse.addProperty(&quot;message&quot;, &quot;Comic ID is required&quot;);&#10;            out.print(gson.toJson(errorResponse));&#10;            return;&#10;        }&#10;&#10;        ReadingHistory progress = readingHistoryDAO.getReadingProgress(userId, comicId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(progress));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleUpdateProgress(String userId, HttpServletRequest request,&#10;                                    HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String comicTitle = requestBody.get(&quot;comicTitle&quot;).getAsString();&#10;        String comicCover = requestBody.has(&quot;comicCover&quot;) ? requestBody.get(&quot;comicCover&quot;).getAsString() : &quot;&quot;;&#10;        int chapter = requestBody.get(&quot;chapter&quot;).getAsInt();&#10;        int totalChapters = requestBody.has(&quot;totalChapters&quot;) ? requestBody.get(&quot;totalChapters&quot;).getAsInt() : 0;&#10;&#10;        ReadingHistory updated = readingHistoryDAO.updateReadingProgress(&#10;            userId, comicId, comicTitle, comicCover, chapter, totalChapters&#10;        );&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.addProperty(&quot;message&quot;, &quot;Reading progress updated successfully&quot;);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(updated));&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleUpdateStatus(String userId, HttpServletRequest request,&#10;                                  HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String status = requestBody.get(&quot;status&quot;).getAsString();&#10;&#10;        ReadingHistory updated = readingHistoryDAO.updateReadingStatus(userId, comicId, status);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        if (updated != null) {&#10;            jsonResponse.addProperty(&quot;success&quot;, true);&#10;            jsonResponse.addProperty(&quot;message&quot;, &quot;Status updated successfully&quot;);&#10;            jsonResponse.add(&quot;data&quot;, gson.toJsonTree(updated));&#10;        } else {&#10;            jsonResponse.addProperty(&quot;success&quot;, false);&#10;            jsonResponse.addProperty(&quot;message&quot;, &quot;Comic not found in reading history&quot;);&#10;        }&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleAddToList(String userId, HttpServletRequest request,&#10;                                HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String comicTitle = requestBody.get(&quot;comicTitle&quot;).getAsString();&#10;        String comicCover = requestBody.has(&quot;comicCover&quot;) ? requestBody.get(&quot;comicCover&quot;).getAsString() : &quot;&quot;;&#10;&#10;        ReadingHistory added = readingHistoryDAO.addToPlanToRead(userId, comicId, comicTitle, comicCover);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.addProperty(&quot;message&quot;, &quot;Added to plan to read&quot;);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(added));&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleRemoveFromHistory(String userId, HttpServletRequest request,&#10;                                       HttpServletResponse response) throws IOException {&#10;        String comicId = request.getParameter(&quot;comicId&quot;);&#10;        if (comicId == null || comicId.isEmpty()) {&#10;            sendErrorResponse(response, &quot;Comic ID is required&quot;, 400);&#10;            return;&#10;        }&#10;&#10;        boolean removed = readingHistoryDAO.removeFromHistory(userId, comicId);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, removed);&#10;        jsonResponse.addProperty(&quot;message&quot;, removed ? &quot;Removed from history&quot; : &quot;Comic not found&quot;);&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void sendErrorResponse(HttpServletResponse response, String message, int statusCode)&#10;            throws IOException {&#10;        response.setStatus(statusCode);&#10;        JsonObject errorResponse = new JsonObject();&#10;        errorResponse.addProperty(&quot;success&quot;, false);&#10;        errorResponse.addProperty(&quot;message&quot;, message);&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(errorResponse));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package reader.site.Comic.servlet;&#10;&#10;import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import reader.site.Comic.dao.ReadingHistoryDAO;&#10;import reader.site.Comic.model.ReadingHistory;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import java.io.IOException;&#10;import java.io.PrintWriter;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@WebServlet(&quot;/api/reading/*&quot;)&#10;public class ReadingHistoryServlet extends HttpServlet {&#10;    private ReadingHistoryDAO readingHistoryDAO;&#10;    private Gson gson;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        readingHistoryDAO = new ReadingHistoryDAO();&#10;        gson = new Gson();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        response.setContentType(&quot;application/json&quot;);&#10;        response.setCharacterEncoding(&quot;UTF-8&quot;);&#10;        PrintWriter out = response.getWriter();&#10;&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        try {&#10;            switch (pathInfo) {&#10;                case &quot;/history&quot;:&#10;                    handleGetHistory(userId, request, response, out);&#10;                    break;&#10;                case &quot;/recent&quot;:&#10;                    handleGetRecent(userId, request, response, out);&#10;                    break;&#10;                case &quot;/completed&quot;:&#10;                    handleGetCompleted(userId, response, out);&#10;                    break;&#10;                case &quot;/reading&quot;:&#10;                    handleGetCurrentlyReading(userId, response, out);&#10;                    break;&#10;                case &quot;/stats&quot;:&#10;                    handleGetStats(userId, response, out);&#10;                    break;&#10;                case &quot;/progress&quot;:&#10;                    handleGetProgress(userId, request, response, out);&#10;                    break;&#10;                default:&#10;                    sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;                    break;&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            sendErrorResponse(response, &quot;Internal server error&quot;, 500);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        response.setContentType(&quot;application/json&quot;);&#10;        response.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        try {&#10;            switch (pathInfo) {&#10;                case &quot;/update&quot;:&#10;                    handleUpdateProgress(userId, request, response);&#10;                    break;&#10;                case &quot;/status&quot;:&#10;                    handleUpdateStatus(userId, request, response);&#10;                    break;&#10;                case &quot;/add-to-list&quot;:&#10;                    handleAddToList(userId, request, response);&#10;                    break;&#10;                default:&#10;                    sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;                    break;&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            sendErrorResponse(response, &quot;Internal server error&quot;, 500);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doDelete(HttpServletRequest request, HttpServletResponse response)&#10;            throws ServletException, IOException {&#10;        String pathInfo = request.getPathInfo();&#10;        HttpSession session = request.getSession(false);&#10;&#10;        if (session == null || session.getAttribute(&quot;userId&quot;) == null) {&#10;            sendErrorResponse(response, &quot;Unauthorized&quot;, 401);&#10;            return;&#10;        }&#10;&#10;        String userId = (String) session.getAttribute(&quot;userId&quot;);&#10;&#10;        if (&quot;/remove&quot;.equals(pathInfo)) {&#10;            handleRemoveFromHistory(userId, request, response);&#10;        } else {&#10;            sendErrorResponse(response, &quot;Invalid endpoint&quot;, 404);&#10;        }&#10;    }&#10;&#10;    private void handleGetHistory(String userId, HttpServletRequest request,&#10;                                 HttpServletResponse response, PrintWriter out) {&#10;        String status = request.getParameter(&quot;status&quot;);&#10;        List&lt;ReadingHistory&gt; history;&#10;&#10;        if (status != null &amp;&amp; !status.isEmpty()) {&#10;            history = readingHistoryDAO.getReadingHistoryByUserAndStatus(userId, status);&#10;        } else {&#10;            history = readingHistoryDAO.getReadingHistoryByUser(userId);&#10;        }&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(history));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetRecent(String userId, HttpServletRequest request,&#10;                                HttpServletResponse response, PrintWriter out) {&#10;        int limit = 10;&#10;        String limitParam = request.getParameter(&quot;limit&quot;);&#10;        if (limitParam != null) {&#10;            try {&#10;                limit = Integer.parseInt(limitParam);&#10;            } catch (NumberFormatException e) {&#10;                limit = 10;&#10;            }&#10;        }&#10;&#10;        List&lt;ReadingHistory&gt; recent = readingHistoryDAO.getRecentlyRead(userId, limit);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(recent));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetCompleted(String userId, HttpServletResponse response, PrintWriter out) {&#10;        List&lt;ReadingHistory&gt; completed = readingHistoryDAO.getCompletedComics(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(completed));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetCurrentlyReading(String userId, HttpServletResponse response, PrintWriter out) {&#10;        List&lt;ReadingHistory&gt; reading = readingHistoryDAO.getCurrentlyReading(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(reading));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetStats(String userId, HttpServletResponse response, PrintWriter out) {&#10;        Map&lt;String, Integer&gt; stats = readingHistoryDAO.getReadingStats(userId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(stats));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleGetProgress(String userId, HttpServletRequest request,&#10;                                  HttpServletResponse response, PrintWriter out) {&#10;        String comicId = request.getParameter(&quot;comicId&quot;);&#10;        if (comicId == null || comicId.isEmpty()) {&#10;            response.setStatus(400);&#10;            JsonObject errorResponse = new JsonObject();&#10;            errorResponse.addProperty(&quot;success&quot;, false);&#10;            errorResponse.addProperty(&quot;message&quot;, &quot;Comic ID is required&quot;);&#10;            out.print(gson.toJson(errorResponse));&#10;            return;&#10;        }&#10;&#10;        ReadingHistory progress = readingHistoryDAO.getReadingProgress(userId, comicId);&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(progress));&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleUpdateProgress(String userId, HttpServletRequest request,&#10;                                    HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String comicTitle = requestBody.get(&quot;comicTitle&quot;).getAsString();&#10;        String comicCover = requestBody.has(&quot;comicCover&quot;) ? requestBody.get(&quot;comicCover&quot;).getAsString() : &quot;&quot;;&#10;        int chapter = requestBody.get(&quot;chapter&quot;).getAsInt();&#10;        int totalChapters = requestBody.has(&quot;totalChapters&quot;) ? requestBody.get(&quot;totalChapters&quot;).getAsInt() : 0;&#10;&#10;        ReadingHistory updated = readingHistoryDAO.updateReadingProgress(&#10;            userId, comicId, comicTitle, comicCover, chapter, totalChapters&#10;        );&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.addProperty(&quot;message&quot;, &quot;Reading progress updated successfully&quot;);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(updated));&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleUpdateStatus(String userId, HttpServletRequest request,&#10;                                  HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String status = requestBody.get(&quot;status&quot;).getAsString();&#10;&#10;        ReadingHistory updated = readingHistoryDAO.updateReadingStatus(userId, comicId, status);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        if (updated != null) {&#10;            jsonResponse.addProperty(&quot;success&quot;, true);&#10;            jsonResponse.addProperty(&quot;message&quot;, &quot;Status updated successfully&quot;);&#10;            jsonResponse.add(&quot;data&quot;, gson.toJsonTree(updated));&#10;        } else {&#10;            jsonResponse.addProperty(&quot;success&quot;, false);&#10;            jsonResponse.addProperty(&quot;message&quot;, &quot;Comic not found in reading history&quot;);&#10;        }&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleAddToList(String userId, HttpServletRequest request,&#10;                                HttpServletResponse response) throws IOException {&#10;        JsonObject requestBody = gson.fromJson(request.getReader(), JsonObject.class);&#10;&#10;        String comicId = requestBody.get(&quot;comicId&quot;).getAsString();&#10;        String comicTitle = requestBody.get(&quot;comicTitle&quot;).getAsString();&#10;        String comicCover = requestBody.has(&quot;comicCover&quot;) ? requestBody.get(&quot;comicCover&quot;).getAsString() : &quot;&quot;;&#10;&#10;        ReadingHistory added = readingHistoryDAO.addToPlanToRead(userId, comicId, comicTitle, comicCover);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, true);&#10;        jsonResponse.addProperty(&quot;message&quot;, &quot;Added to plan to read&quot;);&#10;        jsonResponse.add(&quot;data&quot;, gson.toJsonTree(added));&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void handleRemoveFromHistory(String userId, HttpServletRequest request,&#10;                                       HttpServletResponse response) throws IOException {&#10;        String comicId = request.getParameter(&quot;comicId&quot;);&#10;        if (comicId == null || comicId.isEmpty()) {&#10;            sendErrorResponse(response, &quot;Comic ID is required&quot;, 400);&#10;            return;&#10;        }&#10;&#10;        boolean removed = readingHistoryDAO.removeFromHistory(userId, comicId);&#10;&#10;        JsonObject jsonResponse = new JsonObject();&#10;        jsonResponse.addProperty(&quot;success&quot;, removed);&#10;        jsonResponse.addProperty(&quot;message&quot;, removed ? &quot;Removed from history&quot; : &quot;Comic not found&quot;);&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(jsonResponse));&#10;    }&#10;&#10;    private void sendErrorResponse(HttpServletResponse response, String message, int statusCode)&#10;            throws IOException {&#10;        response.setStatus(statusCode);&#10;        JsonObject errorResponse = new JsonObject();&#10;        errorResponse.addProperty(&quot;success&quot;, false);&#10;        errorResponse.addProperty(&quot;message&quot;, message);&#10;&#10;        PrintWriter out = response.getWriter();&#10;        out.print(gson.toJson(errorResponse));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Comic/src/main/webapp/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Comic/src/main/webapp/application.properties" />
              <option name="originalContent" value="spring.application.name=Comic&#10;spring.data.mongodb.uri=mongodb+srv://23162037_db_user:PbL4JP0UUV7tygFp@comic.ytiwgxu.mongodb.net/Comic?retryWrites=true&amp;w=majority&amp;appName=Comic&#10;server.port=8080&#10;&#10;# MySQL Database Configuration&#10;# Use local MySQL (default) - change these if needed&#10;db.url=jdbc:mysql://localhost:3306/comic_reader?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&#10;db.username=root&#10;db.password=root&#10;db.connectionTimeout=5000&#10;db.socketTimeout=30000&#10;&#10;# For Aiven Cloud MySQL (currently timing out) - uncomment to use:&#10;# db.url=jdbc:mysql://web-welpweb.l.aivencloud.com:13658/defaultdb?useSSL=true&amp;requireSSL=true&amp;serverTimezone=UTC&#10;# db.username=avnadmin&#10;# db.password=AVNS_WRR4qdO4pISviLaP54c&#10;# db.connectionTimeout=10000&#10;# db.socketTimeout=60000" />
              <option name="updatedContent" value="spring.application.name=Comic&#10;spring.data.mongodb.uri=mongodb+srv://23162037_db_user:PbL4JP0UUV7tygFp@comic.ytiwgxu.mongodb.net/Comic?retryWrites=true&amp;w=majority&amp;appName=Comic&#10;server.port=8080&#10;&#10;# MySQL Database Configuration&#10;# Use local MySQL (default) - change these if needed&#10;db.url=jdbc:mysql://localhost:3306/comic_reader?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&#10;db.username=root&#10;db.password=root&#10;db.connectionTimeout=5000&#10;db.socketTimeout=30000&#10;&#10;# For Aiven Cloud MySQL (currently timing out) - uncomment to use:&#10;# db.url=jdbc:mysql://web-welpweb.l.aivencloud.com:13658/defaultdb?useSSL=true&amp;requireSSL=true&amp;serverTimezone=UTC&#10;# db.username=avnadmin&#10;# db.password=AVNS_WRR4qdO4pISviLaP54c&#10;# db.connectionTimeout=10000&#10;# db.socketTimeout=60000" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>